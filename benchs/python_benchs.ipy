from build.pythermo.pythermo import IdealGas, PolyGas8, PolyGasProps8

g = IdealGas(287, 1004)

import numpy as np

N = int(1e6)
t1 = np.repeat(273., N)
t2 = np.repeat(500., N)
p1 = np.repeat(101325., N)
p2 = np.repeat(5e5, N)
eff = np.repeat(0.8, N)
res = np.ones_like(t1)

print("Benchmark pythermo IdealGas")
%timeit -r 100 -n 10 res = g.cp(t1)
%timeit -r 100 -n 10 rres = g.phi(t1)
%timeit -r 100 -n 10 rres = g.pr(t1, t2, eff)
%timeit -r 100 -n 10 rres = g.eff_poly(p1, t1, p2, t2)

class PolyGas(PolyGas8):
    def __init__(self) -> None:
        cp_coeffs = [ 2.35822e-20,  -1.79613e-16, 4.70972e-13, -3.3094e-10,
                -6.27984e-07, 0.00123785,   -0.521742,   1068.43 ]
        super().__init__(PolyGasProps8(cp_coeffs, 0., 287.05))

g = PolyGas()
print("Benchmark pythermo PolyGas8")
%timeit -r 100 -n 10 rres = g.cp(t1)
%timeit -r 100 -n 10 rres = g.phi(t1)
%timeit -r 100 -n 10 rres = g.pr(t1, t2, eff)
%timeit -r 100 -n 10 rres = g.eff_poly(p1, t1, p2, t2)

class NumpyIdealGas:

    def __init__(self, r: float, cp: float):
        self._r = r
        self._cp = cp
        self._gamma = cp / (cp - r)

    def r(self, t):
        return np.full_like(t, self._r)

    def cp(self, t):
        return np.full_like(t, self._cp)

    def h(self, t):
        return self._cp * t
    
    def gamma(self, t):
        return np.full_like(t, self._gamma)

    def phi(self, t):
        return self._cp * np.log(t)

    def pr(self, t1, t2, eff_poly):
        return np.exp(np.log(t2 / t1) * eff_poly * self._cp / self._r)

    def eff_poly(self, p1, t1, p2, t2):
        return self._r * np.log(p2 / p1) / (self.phi(t2) - self.phi(t1))

    def t_from_h(self, h):
        return h / self._cp


class NumpyPolyGas:

    cp_coeff = [ 2.35822e-20,  -1.79613e-16, 4.70972e-13, -3.3094e-10,
                -6.27984e-07, 0.00123785,   -0.521742,   1068.43 ]
    h_coeff = [ 2.35822e-20 / 8., -1.79613e-16 / 7., 4.70972e-13 / 6.,
                -3.3094e-10 / 5., -6.27984e-07 / 4., 0.00123785 / 3.,
                -0.521742 / 2.,   1068.43,           0. ]
    phi_coeff = [ 2.35822e-20 / 7., -1.79613e-16 / 6.,
                4.70972e-13 / 5.,
                -3.3094e-10 / 4.,
                -6.27984e-07 / 3.,
                0.00123785 / 2.,
                -0.521742,
                0.,
                1068.43 ]

    def __init__(self, r: float):
        self._r = r

    def r(self, t):
        return np.full_like(t, self._r)

    def cp(self, t):
        return np.polyval(self.cp_coeff, t)

    def h(self, t):
        return np.polyval(self.h_coeff, t)
    
    def gamma(self, t):
        return self.cp(t) / (self.cp(t) - self._r)

    def phi(self, t):
        return np.polyval(self.phi_coeff[:-1], t) + self.phi_coeff[-1] * np.log(t)

    def dphi(self, t1, t2):
        return (np.polyval(self.phi_coeff[:-1], t2) - np.polyval(self.phi_coeff[:-1], t1)) + self.phi_coeff[-1] * np.log(t2 / t1)

    def pr(self, t1, t2, eff_poly):
        return np.exp(self.dphi(t1, t2) * eff_poly / self._r)

    def eff_poly(self, p1, t1, p2, t2):
        return self._r * np.log(p2 / p1) / self.dphi(t1, t2)


gpy = NumpyIdealGas(287, 1004)

print("Benchmark pure NumPy IdealGas")
%timeit -r 10 -n 10 rres = gpy.cp(t1)
%timeit -r 10 -n 10 rres = gpy.phi(t1)
%timeit -r 10 -n 10 rres = gpy.pr(t1, t2, 0.8)
%timeit -r 10 -n 10 rres = gpy.eff_poly(p1, t1, p2, t2)

gpy = NumpyPolyGas(287)

print("Benchmark pure NumPy PolyGas8")
%timeit -r 10 -n 10 rres = gpy.cp(t1)
%timeit -r 10 -n 10 rres = gpy.phi(t1)
%timeit -r 10 -n 10 rres = gpy.pr(t1, t2, 0.8)
%timeit -r 10 -n 10 rres = gpy.eff_poly(p1, t1, p2, t2)
